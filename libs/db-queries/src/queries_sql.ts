// Code generated by sqlc. DO NOT EDIT.

import type  { Sql } from "postgres";

export const planSetRegionQuery = `-- name: PlanSetRegion :exec
update plans
set region = $1
where id = $2`;

export interface PlanSetRegionArgs {
    region: string | null;
    id: string;
}

export async function planSetRegion(sql: Sql, args: PlanSetRegionArgs): Promise<void> {
    await sql.unsafe(planSetRegionQuery, [args.region, args.id]);
}

export const planDeleteQuery = `-- name: PlanDelete :one
update plans
set is_deleted = true
where id = $1
  and user_id = $2
returning id, user_id, created_at, modified_at, start_lat, start_lon, finish_lat, finish_lon, state, name, error, trip_type, distance, bearing, start_desc, finish_desc, rule_set_id, region, is_deleted`;

export interface PlanDeleteArgs {
    id: string;
    userId: string;
}

export interface PlanDeleteRow {
    id: string;
    userId: string;
    createdAt: Date;
    modifiedAt: Date | null;
    startLat: string;
    startLon: string;
    finishLat: string | null;
    finishLon: string | null;
    state: "new" | "planning" | "done" | "error";
    name: string;
    error: string | null;
    tripType: "round-trip" | "start-finish";
    distance: string;
    bearing: string | null;
    startDesc: string;
    finishDesc: string | null;
    ruleSetId: string;
    region: string | null;
    isDeleted: boolean;
}

export async function planDelete(sql: Sql, args: PlanDeleteArgs): Promise<PlanDeleteRow | null> {
    const rows = await sql.unsafe(planDeleteQuery, [args.id, args.userId]).values();
    if (rows.length !== 1) {
        return null;
    }
    const row = rows[0];
    if (!row) {
        return null;
    }
    return {
        id: row[0],
        userId: row[1],
        createdAt: row[2],
        modifiedAt: row[3],
        startLat: row[4],
        startLon: row[5],
        finishLat: row[6],
        finishLon: row[7],
        state: row[8],
        name: row[9],
        error: row[10],
        tripType: row[11],
        distance: row[12],
        bearing: row[13],
        startDesc: row[14],
        finishDesc: row[15],
        ruleSetId: row[16],
        region: row[17],
        isDeleted: row[18]
    };
}

export const routeDeleteQuery = `-- name: RouteDelete :one
update routes
set is_deleted = true
where id = $1
  and user_id = $2
returning id, user_id, created_at, plan_id, name, linestring, stats_len_m, stats_score, stats_junction_count, is_deleted`;

export interface RouteDeleteArgs {
    id: string;
    userId: string;
}

export interface RouteDeleteRow {
    id: string;
    userId: string;
    createdAt: Date;
    planId: string;
    name: string;
    linestring: string | null;
    statsLenM: string;
    statsScore: string;
    statsJunctionCount: string;
    isDeleted: boolean;
}

export async function routeDelete(sql: Sql, args: RouteDeleteArgs): Promise<RouteDeleteRow | null> {
    const rows = await sql.unsafe(routeDeleteQuery, [args.id, args.userId]).values();
    if (rows.length !== 1) {
        return null;
    }
    const row = rows[0];
    if (!row) {
        return null;
    }
    return {
        id: row[0],
        userId: row[1],
        createdAt: row[2],
        planId: row[3],
        name: row[4],
        linestring: row[5],
        statsLenM: row[6],
        statsScore: row[7],
        statsJunctionCount: row[8],
        isDeleted: row[9]
    };
}

export const routeDeleteByPlanIdQuery = `-- name: RouteDeleteByPlanId :one
update routes
set is_deleted = true
where plan_id = $1
  and user_id = $2
returning id, user_id, created_at, plan_id, name, linestring, stats_len_m, stats_score, stats_junction_count, is_deleted`;

export interface RouteDeleteByPlanIdArgs {
    planId: string;
    userId: string;
}

export interface RouteDeleteByPlanIdRow {
    id: string;
    userId: string;
    createdAt: Date;
    planId: string;
    name: string;
    linestring: string | null;
    statsLenM: string;
    statsScore: string;
    statsJunctionCount: string;
    isDeleted: boolean;
}

export async function routeDeleteByPlanId(sql: Sql, args: RouteDeleteByPlanIdArgs): Promise<RouteDeleteByPlanIdRow | null> {
    const rows = await sql.unsafe(routeDeleteByPlanIdQuery, [args.planId, args.userId]).values();
    if (rows.length !== 1) {
        return null;
    }
    const row = rows[0];
    if (!row) {
        return null;
    }
    return {
        id: row[0],
        userId: row[1],
        createdAt: row[2],
        planId: row[3],
        name: row[4],
        linestring: row[5],
        statsLenM: row[6],
        statsScore: row[7],
        statsJunctionCount: row[8],
        isDeleted: row[9]
    };
}

export const regionInsertOrUpdateQuery = `-- name: RegionInsertOrUpdate :one
insert into regions (region, geojson, polygon)
values ($1, $2, $3)
on conflict (region) do update
set geojson = excluded.geojson,
  polygon = excluded.polygon
returning region, geojson, polygon`;

export interface RegionInsertOrUpdateArgs {
    region: string;
    geojson: any;
    polygon: string | null;
}

export interface RegionInsertOrUpdateRow {
    region: string;
    geojson: any;
    polygon: string | null;
}

export async function regionInsertOrUpdate(sql: Sql, args: RegionInsertOrUpdateArgs): Promise<RegionInsertOrUpdateRow | null> {
    const rows = await sql.unsafe(regionInsertOrUpdateQuery, [args.region, args.geojson, args.polygon]).values();
    if (rows.length !== 1) {
        return null;
    }
    const row = rows[0];
    if (!row) {
        return null;
    }
    return {
        region: row[0],
        geojson: row[1],
        polygon: row[2]
    };
}

export const ruleSetsListQuery = `-- name: RuleSetsList :many
select id, user_id, name, default_set, is_deleted from rule_sets
where (rule_sets.user_id = $1
  or rule_sets.user_id is null)
  and is_deleted = false
order by default_set desc`;

export interface RuleSetsListArgs {
    userId: string | null;
}

export interface RuleSetsListRow {
    id: string;
    userId: string | null;
    name: string;
    defaultSet: boolean;
    isDeleted: boolean;
}

export async function ruleSetsList(sql: Sql, args: RuleSetsListArgs): Promise<RuleSetsListRow[]> {
    return (await sql.unsafe(ruleSetsListQuery, [args.userId]).values()).map(row => ({
        id: row[0],
        userId: row[1],
        name: row[2],
        defaultSet: row[3],
        isDeleted: row[4]
    }));
}

export const ruleSetRoadTagsListQuery = `-- name: RuleSetRoadTagsList :many
select user_id, rule_set_id, tag_key, value from rule_set_road_tags
where (rule_set_road_tags.user_id = $1
  or rule_set_road_tags.user_id is null)
  and rule_set_road_tags.rule_set_id in (
    select id from rule_sets
    where (rule_sets.user_id = $1
      or rule_sets.user_id is null)
      and rule_sets.is_deleted = false
  )`;

export interface RuleSetRoadTagsListArgs {
    userId: string | null;
}

export interface RuleSetRoadTagsListRow {
    userId: string | null;
    ruleSetId: string;
    tagKey: string;
    value: number | null;
}

export async function ruleSetRoadTagsList(sql: Sql, args: RuleSetRoadTagsListArgs): Promise<RuleSetRoadTagsListRow[]> {
    return (await sql.unsafe(ruleSetRoadTagsListQuery, [args.userId]).values()).map(row => ({
        userId: row[0],
        ruleSetId: row[1],
        tagKey: row[2],
        value: row[3]
    }));
}

export const ruleSetRoadTagsListByRuleSetIdWithDeletedQuery = `-- name: RuleSetRoadTagsListByRuleSetIdWithDeleted :many
select user_id, rule_set_id, tag_key, value from rule_set_road_tags
where (rule_set_road_tags.user_id = $1
  or rule_set_road_tags.user_id is null)
  and rule_set_road_tags.rule_set_id = $2`;

export interface RuleSetRoadTagsListByRuleSetIdWithDeletedArgs {
    userId: string | null;
    ruleSetId: string;
}

export interface RuleSetRoadTagsListByRuleSetIdWithDeletedRow {
    userId: string | null;
    ruleSetId: string;
    tagKey: string;
    value: number | null;
}

export async function ruleSetRoadTagsListByRuleSetIdWithDeleted(sql: Sql, args: RuleSetRoadTagsListByRuleSetIdWithDeletedArgs): Promise<RuleSetRoadTagsListByRuleSetIdWithDeletedRow[]> {
    return (await sql.unsafe(ruleSetRoadTagsListByRuleSetIdWithDeletedQuery, [args.userId, args.ruleSetId]).values()).map(row => ({
        userId: row[0],
        ruleSetId: row[1],
        tagKey: row[2],
        value: row[3]
    }));
}

export const ruleSetUpsertQuery = `-- name: RuleSetUpsert :one
insert into rule_sets (
  id,
  user_id, 
  name
)
values (
  $1,
  $2,
  $3
)
on conflict (id) do update
set name = excluded.name
returning id, user_id, name, default_set, is_deleted`;

export interface RuleSetUpsertArgs {
    id: string;
    userId: string | null;
    name: string;
}

export interface RuleSetUpsertRow {
    id: string;
    userId: string | null;
    name: string;
    defaultSet: boolean;
    isDeleted: boolean;
}

export async function ruleSetUpsert(sql: Sql, args: RuleSetUpsertArgs): Promise<RuleSetUpsertRow | null> {
    const rows = await sql.unsafe(ruleSetUpsertQuery, [args.id, args.userId, args.name]).values();
    if (rows.length !== 1) {
        return null;
    }
    const row = rows[0];
    if (!row) {
        return null;
    }
    return {
        id: row[0],
        userId: row[1],
        name: row[2],
        defaultSet: row[3],
        isDeleted: row[4]
    };
}

export const ruleSetRoadTagsUpsertQuery = `-- name: RuleSetRoadTagsUpsert :one
insert into rule_set_road_tags (
  user_id,
  rule_set_id,
  tag_key,
  value
)
values (
  $1,
  $2,
  $3,
  $4
)
on conflict (rule_set_id, tag_key) do update
set value = excluded.value
returning user_id, rule_set_id, tag_key, value`;

export interface RuleSetRoadTagsUpsertArgs {
    userId: string | null;
    ruleSetId: string;
    tagKey: string;
    value: string | null;
}

export interface RuleSetRoadTagsUpsertRow {
    userId: string | null;
    ruleSetId: string;
    tagKey: string;
    value: number | null;
}

export async function ruleSetRoadTagsUpsert(sql: Sql, args: RuleSetRoadTagsUpsertArgs): Promise<RuleSetRoadTagsUpsertRow | null> {
    const rows = await sql.unsafe(ruleSetRoadTagsUpsertQuery, [args.userId, args.ruleSetId, args.tagKey, args.value]).values();
    if (rows.length !== 1) {
        return null;
    }
    const row = rows[0];
    if (!row) {
        return null;
    }
    return {
        userId: row[0],
        ruleSetId: row[1],
        tagKey: row[2],
        value: row[3]
    };
}

export const ruleSetGetQuery = `-- name: RuleSetGet :one
select id, user_id, name, default_set, is_deleted from rule_sets
where rule_sets.id = $1
  and rule_sets.is_deleted = false`;

export interface RuleSetGetArgs {
    id: string;
}

export interface RuleSetGetRow {
    id: string;
    userId: string | null;
    name: string;
    defaultSet: boolean;
    isDeleted: boolean;
}

export async function ruleSetGet(sql: Sql, args: RuleSetGetArgs): Promise<RuleSetGetRow | null> {
    const rows = await sql.unsafe(ruleSetGetQuery, [args.id]).values();
    if (rows.length !== 1) {
        return null;
    }
    const row = rows[0];
    if (!row) {
        return null;
    }
    return {
        id: row[0],
        userId: row[1],
        name: row[2],
        defaultSet: row[3],
        isDeleted: row[4]
    };
}

export const ruleSetSetDeletedQuery = `-- name: RuleSetSetDeleted :exec
update rule_sets
set is_deleted = true
where id = $1`;

export interface RuleSetSetDeletedArgs {
    id: string;
}

export async function ruleSetSetDeleted(sql: Sql, args: RuleSetSetDeletedArgs): Promise<void> {
    await sql.unsafe(ruleSetSetDeletedQuery, [args.id]);
}

export const routesGetQuery = `-- name: RoutesGet :many
with points_array as (
	select 
		id, 
		array_agg(array[postgis.st_y(p.geom), postgis.st_x(p.geom)] order by p.path) as lat_lon_array
	from routes r, postgis.st_dumppoints(r.linestring) p
	where r.user_id = $1
		and r.id = $2
    and r.is_deleted = false
	group by r.id
) 
select 
	r.id,
	r.name,
	r.created_at,
  r.stats_score,
  r.stats_len_m,
  r.stats_junction_count,
	pa.lat_lon_array,
	p.id as plan_id,
	p.name as plan_name,
	p.state as plan_state
from routes r
inner join plans p
	on p.id = r.plan_id 
    and p.is_deleted = false
inner join points_array pa
	on pa.id = r.id
where r.user_id = $1
	and r.id = $2
  and r.is_deleted = false
order by 
	r.created_at desc`;

export interface RoutesGetArgs {
    userId: string;
    id: string;
}

export interface RoutesGetRow {
    id: string;
    name: string;
    createdAt: Date;
    statsScore: string;
    statsLenM: string;
    statsJunctionCount: string;
    latLonArray: string[];
    planId: string;
    planName: string;
    planState: "new" | "planning" | "done" | "error";
}

export async function routesGet(sql: Sql, args: RoutesGetArgs): Promise<RoutesGetRow[]> {
    return (await sql.unsafe(routesGetQuery, [args.userId, args.id]).values()).map(row => ({
        id: row[0],
        name: row[1],
        createdAt: row[2],
        statsScore: row[3],
        statsLenM: row[4],
        statsJunctionCount: row[5],
        latLonArray: row[6],
        planId: row[7],
        planName: row[8],
        planState: row[9]
    }));
}

export const routeStatsGetQuery = `-- name: RouteStatsGet :many
select id, user_id, route_id, stat_type, stat_name, len_m, percentage from route_breakdown_stats
where user_id = $1
  and route_id = $2`;

export interface RouteStatsGetArgs {
    userId: string;
    routeId: string;
}

export interface RouteStatsGetRow {
    id: string;
    userId: string;
    routeId: string;
    statType: "type" | "surface" | "smoothness";
    statName: string;
    lenM: string;
    percentage: string;
}

export async function routeStatsGet(sql: Sql, args: RouteStatsGetArgs): Promise<RouteStatsGetRow[]> {
    return (await sql.unsafe(routeStatsGetQuery, [args.userId, args.routeId]).values()).map(row => ({
        id: row[0],
        userId: row[1],
        routeId: row[2],
        statType: row[3],
        statName: row[4],
        lenM: row[5],
        percentage: row[6]
    }));
}

export const planListQuery = `-- name: PlanList :many
select 
	p.id,
	p.name,
	p.start_lat,
	p.start_lon,
  p.start_desc,
	p.finish_lat,
	p.finish_lon,
  p.finish_desc,
  p.distance,
  p.bearing,
  p.trip_type,
	p.state,
	p.created_at,
  p.rule_set_id,
	r.id as route_id,
	r.name as route_name,
	r.created_at as route_created_at
from plans p
left join routes r 
	on r.plan_id = p.id
  and r.is_deleted = false
where p.user_id = $1
  and p.is_deleted = false
order by
	p.created_at desc`;

export interface PlanListArgs {
    userId: string;
}

export interface PlanListRow {
    id: string;
    name: string;
    startLat: string;
    startLon: string;
    startDesc: string;
    finishLat: string | null;
    finishLon: string | null;
    finishDesc: string | null;
    distance: string;
    bearing: string | null;
    tripType: "round-trip" | "start-finish";
    state: "new" | "planning" | "done" | "error";
    createdAt: Date;
    ruleSetId: string;
    routeId: string | null;
    routeName: string | null;
    routeCreatedAt: Date | null;
}

export async function planList(sql: Sql, args: PlanListArgs): Promise<PlanListRow[]> {
    return (await sql.unsafe(planListQuery, [args.userId]).values()).map(row => ({
        id: row[0],
        name: row[1],
        startLat: row[2],
        startLon: row[3],
        startDesc: row[4],
        finishLat: row[5],
        finishLon: row[6],
        finishDesc: row[7],
        distance: row[8],
        bearing: row[9],
        tripType: row[10],
        state: row[11],
        createdAt: row[12],
        ruleSetId: row[13],
        routeId: row[14],
        routeName: row[15],
        routeCreatedAt: row[16]
    }));
}

export const planCreateQuery = `-- name: PlanCreate :one
insert into plans (
  user_id, 
  id, 
  name, 
  start_lat, 
  start_lon, 
  finish_lat, 
  finish_lon, 
  start_desc, 
  finish_desc, 
  trip_type,
  distance,
  bearing,
  rule_set_id
)

values (
  $1, 
  $2, 
  $3, 
  $4, 
  $5, 
  $6, 
  $7, 
  $8, 
  $9, 
  $10,
  $11,
  $12,
  $13
)
returning id`;

export interface PlanCreateArgs {
    userId: string;
    id: string;
    name: string;
    startLat: string;
    startLon: string;
    finishLat: string | null;
    finishLon: string | null;
    startDesc: string;
    finishDesc: string | null;
    tripType: "round-trip" | "start-finish";
    distance: string;
    bearing: string | null;
    ruleSetId: string;
}

export interface PlanCreateRow {
    id: string;
}

export async function planCreate(sql: Sql, args: PlanCreateArgs): Promise<PlanCreateRow | null> {
    const rows = await sql.unsafe(planCreateQuery, [args.userId, args.id, args.name, args.startLat, args.startLon, args.finishLat, args.finishLon, args.startDesc, args.finishDesc, args.tripType, args.distance, args.bearing, args.ruleSetId]).values();
    if (rows.length !== 1) {
        return null;
    }
    const row = rows[0];
    if (!row) {
        return null;
    }
    return {
        id: row[0]
    };
}

export const regionGetQuery = `-- name: RegionGet :many
select region, geojson, polygon from regions`;

export interface RegionGetRow {
    region: string;
    geojson: any;
    polygon: string | null;
}

export async function regionGet(sql: Sql): Promise<RegionGetRow[]> {
    return (await sql.unsafe(regionGetQuery, []).values()).map(row => ({
        region: row[0],
        geojson: row[1],
        polygon: row[2]
    }));
}

export const regionFindFromCoordsQuery = `-- name: RegionFindFromCoords :many
select region, geojson, polygon from public.regions
where postgis.st_within(postgis.st_point($1, $2), regions.polygon)`;

export interface RegionFindFromCoordsArgs {
    lon: string;
    lat: string;
}

export interface RegionFindFromCoordsRow {
    region: string;
    geojson: any;
    polygon: string | null;
}

export async function regionFindFromCoords(sql: Sql, args: RegionFindFromCoordsArgs): Promise<RegionFindFromCoordsRow[]> {
    return (await sql.unsafe(regionFindFromCoordsQuery, [args.lon, args.lat]).values()).map(row => ({
        region: row[0],
        geojson: row[1],
        polygon: row[2]
    }));
}

export const regionGetCountQuery = `-- name: RegionGetCount :one
select count(*) from regions`;

export interface RegionGetCountRow {
    count: string;
}

export async function regionGetCount(sql: Sql): Promise<RegionGetCountRow | null> {
    const rows = await sql.unsafe(regionGetCountQuery, []).values();
    if (rows.length !== 1) {
        return null;
    }
    const row = rows[0];
    if (!row) {
        return null;
    }
    return {
        count: row[0]
    };
}

export const planGetByIdQuery = `-- name: PlanGetById :one
select id, user_id, created_at, modified_at, start_lat, start_lon, finish_lat, finish_lon, state, name, error, trip_type, distance, bearing, start_desc, finish_desc, rule_set_id, region, is_deleted from plans
where plans.id = $1`;

export interface PlanGetByIdArgs {
    id: string;
}

export interface PlanGetByIdRow {
    id: string;
    userId: string;
    createdAt: Date;
    modifiedAt: Date | null;
    startLat: string;
    startLon: string;
    finishLat: string | null;
    finishLon: string | null;
    state: "new" | "planning" | "done" | "error";
    name: string;
    error: string | null;
    tripType: "round-trip" | "start-finish";
    distance: string;
    bearing: string | null;
    startDesc: string;
    finishDesc: string | null;
    ruleSetId: string;
    region: string | null;
    isDeleted: boolean;
}

export async function planGetById(sql: Sql, args: PlanGetByIdArgs): Promise<PlanGetByIdRow | null> {
    const rows = await sql.unsafe(planGetByIdQuery, [args.id]).values();
    if (rows.length !== 1) {
        return null;
    }
    const row = rows[0];
    if (!row) {
        return null;
    }
    return {
        id: row[0],
        userId: row[1],
        createdAt: row[2],
        modifiedAt: row[3],
        startLat: row[4],
        startLon: row[5],
        finishLat: row[6],
        finishLon: row[7],
        state: row[8],
        name: row[9],
        error: row[10],
        tripType: row[11],
        distance: row[12],
        bearing: row[13],
        startDesc: row[14],
        finishDesc: row[15],
        ruleSetId: row[16],
        region: row[17],
        isDeleted: row[18]
    };
}

export const plansGetNewQuery = `-- name: PlansGetNew :many
select id, user_id, created_at, modified_at, start_lat, start_lon, finish_lat, finish_lon, state, name, error, trip_type, distance, bearing, start_desc, finish_desc, rule_set_id, region, is_deleted from plans
where state = 'new'`;

export interface PlansGetNewRow {
    id: string;
    userId: string;
    createdAt: Date;
    modifiedAt: Date | null;
    startLat: string;
    startLon: string;
    finishLat: string | null;
    finishLon: string | null;
    state: "new" | "planning" | "done" | "error";
    name: string;
    error: string | null;
    tripType: "round-trip" | "start-finish";
    distance: string;
    bearing: string | null;
    startDesc: string;
    finishDesc: string | null;
    ruleSetId: string;
    region: string | null;
    isDeleted: boolean;
}

export async function plansGetNew(sql: Sql): Promise<PlansGetNewRow[]> {
    return (await sql.unsafe(plansGetNewQuery, []).values()).map(row => ({
        id: row[0],
        userId: row[1],
        createdAt: row[2],
        modifiedAt: row[3],
        startLat: row[4],
        startLon: row[5],
        finishLat: row[6],
        finishLon: row[7],
        state: row[8],
        name: row[9],
        error: row[10],
        tripType: row[11],
        distance: row[12],
        bearing: row[13],
        startDesc: row[14],
        finishDesc: row[15],
        ruleSetId: row[16],
        region: row[17],
        isDeleted: row[18]
    }));
}

export const planSetStateQuery = `-- name: PlanSetState :exec
update plans
set 
	state = $1, 
	modified_at = now()
where plans.id = $2`;

export interface PlanSetStateArgs {
    state: "new" | "planning" | "done" | "error";
    id: string;
}

export async function planSetState(sql: Sql, args: PlanSetStateArgs): Promise<void> {
    await sql.unsafe(planSetStateQuery, [args.state, args.id]);
}

export const routeInsertQuery = `-- name: RouteInsert :one
insert into routes (
	name, 
	user_id, 
	plan_id, 
  stats_len_m,
  stats_junction_count,
  stats_score,
	linestring
)
values (
	$1, 
	$2, 
	$3, 
  $4,
  $5,
  $6,
	postgis.st_makeline(
		array(
			select 
				postgis.st_point((p->>1)::numeric, (p->>0)::numeric)
			from (
				select jsonb_array_elements($7::jsonb) p
			) arrayPoints
		)
	)
)
returning id, user_id, created_at, plan_id, name, linestring, stats_len_m, stats_score, stats_junction_count, is_deleted`;

export interface RouteInsertArgs {
    name: string;
    userId: string;
    planId: string;
    statsLenM: string;
    statsJunctionCount: string;
    statsScore: string;
    latLonArray: any;
}

export interface RouteInsertRow {
    id: string;
    userId: string;
    createdAt: Date;
    planId: string;
    name: string;
    linestring: string | null;
    statsLenM: string;
    statsScore: string;
    statsJunctionCount: string;
    isDeleted: boolean;
}

export async function routeInsert(sql: Sql, args: RouteInsertArgs): Promise<RouteInsertRow | null> {
    const rows = await sql.unsafe(routeInsertQuery, [args.name, args.userId, args.planId, args.statsLenM, args.statsJunctionCount, args.statsScore, args.latLonArray]).values();
    if (rows.length !== 1) {
        return null;
    }
    const row = rows[0];
    if (!row) {
        return null;
    }
    return {
        id: row[0],
        userId: row[1],
        createdAt: row[2],
        planId: row[3],
        name: row[4],
        linestring: row[5],
        statsLenM: row[6],
        statsScore: row[7],
        statsJunctionCount: row[8],
        isDeleted: row[9]
    };
}

export const routeBreakdownStatsInsertQuery = `-- name: RouteBreakdownStatsInsert :one
insert into route_breakdown_stats (
  user_id,
  route_id,
  stat_type,
  stat_name,
  len_m,
  percentage
)
values (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
)
returning id, user_id, route_id, stat_type, stat_name, len_m, percentage`;

export interface RouteBreakdownStatsInsertArgs {
    userId: string;
    routeId: string;
    statType: "type" | "surface" | "smoothness";
    statName: string;
    lenM: string;
    percentage: string;
}

export interface RouteBreakdownStatsInsertRow {
    id: string;
    userId: string;
    routeId: string;
    statType: "type" | "surface" | "smoothness";
    statName: string;
    lenM: string;
    percentage: string;
}

export async function routeBreakdownStatsInsert(sql: Sql, args: RouteBreakdownStatsInsertArgs): Promise<RouteBreakdownStatsInsertRow | null> {
    const rows = await sql.unsafe(routeBreakdownStatsInsertQuery, [args.userId, args.routeId, args.statType, args.statName, args.lenM, args.percentage]).values();
    if (rows.length !== 1) {
        return null;
    }
    const row = rows[0];
    if (!row) {
        return null;
    }
    return {
        id: row[0],
        userId: row[1],
        routeId: row[2],
        statType: row[3],
        statName: row[4],
        lenM: row[5],
        percentage: row[6]
    };
}

