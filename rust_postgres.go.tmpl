{{- /* 
https://docs.sqlc.dev/en/stable/reference/query-annotations.html
https://github.com/sqlc-dev/sqlc/blob/main/protos/plugin/codegen.proto
https://github.com/rusqlite/rusqlite
https://pkg.go.dev/text/template
*/ -}}


{{- $CacheStatementsGlobal :=  "cache_statements" | GetPluginOption -}}

{{- define "RustType" -}}
{{- $rustType := .Type.Name -}}
{{- $TypeName :=   .Type.Name | ToLower  -}}
{{- if eq $TypeName "integer"}}{{ $rustType = "i64" }}
{{- else if eq $TypeName "text"}}{{ $rustType = "String" }}
{{- else if eq $TypeName "blob"}}{{ $rustType = "Vec<u8>" }}
{{- else if eq $TypeName "real"}}{{ $rustType = "f64" }}
{{- else if eq $TypeName "float"}}{{ $rustType = "f64" }}
{{- else if eq $TypeName "double"}}{{ $rustType = "f64" }}
{{- else if eq $TypeName "boolean"}}{{ $rustType = "bool" }}
{{- else if eq $TypeName "bool"}}{{ $rustType = "bool" }}
{{- else if eq $TypeName "numeric"}}{{ $rustType = "f64" }}
{{- end -}}
{{- $rustType }}
{{- end -}}

#[allow(unused)]
use postgres::Client;
{{- if GetPluginOption "use_serde" }}
use serde::{Serialize, Deserialize};
{{- end -}}

{{- range .Queries }}

{{range .Comments}}// {{.}}
{{end}}

{{$rowType := printf "%sRow" .Name -}}
{{- if or (eq .Cmd ":many") (eq .Cmd ":one") }}
    {{ if GetPluginOption "use_serde" -}}
    #[derive(Serialize, Deserialize, Debug)]
    {{- else -}}
    #[derive(Debug)]
    {{- end }}
    pub struct {{ $rowType }} { {{- range .Columns}}
    pub {{.Name}}:
    {{- if not .NotNull }}Option<{{end}}
    {{- template "RustType" .}}
    {{- if not .NotNull }}>{{end}},
    {{- end}}
}

{{end}}
{{- $CacheStatements := $CacheStatementsGlobal -}}
{{- if (Contains (ToLower .Filename) "cache") -}}
  {{- $CacheStatements = true -}}
{{- end -}}
{{- if (Contains (ToLower .Filename) "nocache") -}}
  {{- $CacheStatements = false -}}
{{- end -}}

{{- if eq .Cmd ":many" }}
{{- $returnType := printf "Vec<%s>" $rowType -}}
#[allow(non_snake_case)]
pub fn {{.Name}}(client: &mut Client{{range .Params}},
  {{.Column.Name}}:{{template "RustType" .Column}}
{{- end}}

 ) -> Result<{{ $returnType }}, postgres::Error> {

    let stmt = {{- if $CacheStatements -}}client.prepare_cached{{- else -}}client.prepare{{- end -}}(r#"{{ .Text }}"#)?;

    let result : Result<{{ $returnType }}, postgres::Error> = client
        .query(&stmt, &[{{range .Params}} &{{.Column.Name}}, {{end}}])?
        .iter().map(|row| {
            Ok({{$rowType}} { {{- range $index, $column := .Columns}}
              {{.Name}}: row.try_get({{$index}})?,
            {{- end}} })
        })
        .collect();

    result
}
{{- end -}}



{{- if eq .Cmd ":one" }}
{{- $returnType := printf "Option<%s>" $rowType -}}
#[allow(non_snake_case)]
pub fn {{.Name}}(client: &mut Client{{range .Params}},
  {{.Column.Name}}:{{template "RustType" .Column}}
{{- end}}

 ) -> Result<{{ $returnType }}, postgres::Error> {

    let stmt = {{- if $CacheStatements -}}client.prepare_cached{{- else -}}client.prepare{{- end -}}(r#"{{ .Text }}"#)?;

    let result : Result<{{ $returnType }}, postgres::Error> = client
        .query(&stmt, &[{{range .Params}} &{{.Column.Name}}, {{end}}])?
        .get(0)
        .map(|row| {
            Ok({{$rowType}} { {{- range $index, $column := .Columns}}
              {{.Name}}: row.try_get({{$index}})?,
            {{- end}} })
        })
        .map_or(Ok(None), |v| v.map(Some));

    result
}
{{- end -}}


{{- if eq .Cmd ":exec" }}
#[allow(non_snake_case)]
pub fn {{.Name}}(client: &mut Client{{range .Params}},
  {{.Column.Name}}:{{template "RustType" .Column}}
{{- end}}

 ) -> Result<u64, postgres::Error> {
    client.execute(r#"{{ .Text }}"#, &[{{range .Params}} &{{.Column.Name}}, {{end}}])
}
{{- end -}}


{{- end -}}
