create table "public"."realtime_tests" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp without time zone,
    "message" text,
    "user_id" uuid not null
);


alter table "public"."realtime_tests" enable row level security;

CREATE UNIQUE INDEX realtime_tests_pkey ON public.realtime_tests USING btree (id);

alter table "public"."realtime_tests" add constraint "realtime_tests_pkey" PRIMARY KEY using index "realtime_tests_pkey";

alter table "public"."realtime_tests" add constraint "realtime_tests_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."realtime_tests" validate constraint "realtime_tests_user_id_fkey";

grant delete on table "public"."realtime_tests" to "anon";

grant insert on table "public"."realtime_tests" to "anon";

grant references on table "public"."realtime_tests" to "anon";

grant select on table "public"."realtime_tests" to "anon";

grant trigger on table "public"."realtime_tests" to "anon";

grant truncate on table "public"."realtime_tests" to "anon";

grant update on table "public"."realtime_tests" to "anon";

grant delete on table "public"."realtime_tests" to "authenticated";

grant insert on table "public"."realtime_tests" to "authenticated";

grant references on table "public"."realtime_tests" to "authenticated";

grant select on table "public"."realtime_tests" to "authenticated";

grant trigger on table "public"."realtime_tests" to "authenticated";

grant truncate on table "public"."realtime_tests" to "authenticated";

grant update on table "public"."realtime_tests" to "authenticated";

grant delete on table "public"."realtime_tests" to "service_role";

grant insert on table "public"."realtime_tests" to "service_role";

grant references on table "public"."realtime_tests" to "service_role";

grant select on table "public"."realtime_tests" to "service_role";

grant trigger on table "public"."realtime_tests" to "service_role";

grant truncate on table "public"."realtime_tests" to "service_role";

grant update on table "public"."realtime_tests" to "service_role";

create policy "Enable insert for users based on user_id"
on "public"."realtime_tests"
as permissive
for all
to public
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));
