// Code generated by sqlc. DO NOT EDIT.

import { Sql } from "postgres";

export const routesGetQuery = `-- name: RoutesGet :many
select 
	r.id,
	r.name,
	r.created_at,
	p.id as plan_id,
	p.name as plan_name,
	p.state as plan_state,
	rp.id as point_id,
	rp.lat as point_lat,
	rp.lon as point_lon,
	rp.sequence as point_sequence
from routes r
inner join plans p
	on p.id = r.plan_id
left join route_points rp
	on rp.route_id = r.id
where r.user_id = $1
	and r.id = $2
order by 
	r.created_at desc, 
	rp.sequence asc`;

export interface RoutesGetArgs {
    userId: string;
    id: string;
}

export interface RoutesGetRow {
    id: string;
    name: string;
    createdAt: Date;
    planId: string;
    planName: string;
    planState: "new" | "planning" | "done";
    pointId: string | null;
    pointLat: string | null;
    pointLon: string | null;
    pointSequence: string | null;
}

export async function routesGet(sql: Sql, args: RoutesGetArgs): Promise<RoutesGetRow[]> {
    return (await sql.unsafe(routesGetQuery, [args.userId, args.id]).values()).map(row => ({
        id: row[0],
        name: row[1],
        createdAt: row[2],
        planId: row[3],
        planName: row[4],
        planState: row[5],
        pointId: row[6],
        pointLat: row[7],
        pointLon: row[8],
        pointSequence: row[9]
    }));
}

export const planListQuery = `-- name: PlanList :many
select 
	p.id,
	p.name,
	p.from_lat,
	p.from_lon,
	p.to_lat,
	p.to_lon,
	p.state,
	p.created_at,
	r.id as route_id,
	r.name as route_name,
	r.created_at as route_created_at,
	rp.id as point_id,
	rp.lat as point_lat,
	rp.lon as point_lon,
	rp.sequence as point_sequence
from plans p
left join routes r 
	on r.plan_id = p.id
left join route_points rp
	on rp.route_id = r.id
		and mod(round(rp.sequence, 0), 100) = 0
where p.user_id = $1
order by
	p.created_at desc,
	rp.sequence asc`;

export interface PlanListArgs {
    userId: string;
}

export interface PlanListRow {
    id: string;
    name: string;
    fromLat: string;
    fromLon: string;
    toLat: string;
    toLon: string;
    state: "new" | "planning" | "done";
    createdAt: Date;
    routeId: string | null;
    routeName: string | null;
    routeCreatedAt: Date | null;
    pointId: string | null;
    pointLat: string | null;
    pointLon: string | null;
    pointSequence: string | null;
}

export async function planList(sql: Sql, args: PlanListArgs): Promise<PlanListRow[]> {
    return (await sql.unsafe(planListQuery, [args.userId]).values()).map(row => ({
        id: row[0],
        name: row[1],
        fromLat: row[2],
        fromLon: row[3],
        toLat: row[4],
        toLon: row[5],
        state: row[6],
        createdAt: row[7],
        routeId: row[8],
        routeName: row[9],
        routeCreatedAt: row[10],
        pointId: row[11],
        pointLat: row[12],
        pointLon: row[13],
        pointSequence: row[14]
    }));
}

export const planCreateQuery = `-- name: PlanCreate :one
insert into plans (user_id, id, name, from_lat, from_lon, to_lat, to_lon)
values ($1, $2, $3, $4, $5, $6, $7)
returning id`;

export interface PlanCreateArgs {
    userId: string;
    id: string;
    name: string;
    fromLat: string;
    fromLon: string;
    toLat: string;
    toLon: string;
}

export interface PlanCreateRow {
    id: string;
}

export async function planCreate(sql: Sql, args: PlanCreateArgs): Promise<PlanCreateRow | null> {
    const rows = await sql.unsafe(planCreateQuery, [args.userId, args.id, args.name, args.fromLat, args.fromLon, args.toLat, args.toLon]).values();
    if (rows.length !== 1) {
        return null;
    }
    const row = rows[0];
    if (!row) {
        return null;
    }
    return {
        id: row[0]
    };
}

