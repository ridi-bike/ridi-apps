// Code generated by sqlc. DO NOT EDIT.

import { Sql } from "postgres";

export const regionInsertQuery = `-- name: RegionInsert :one
insert into regions
(region, pbf_md5, version, geojson, polygon)
values
($1, $2, 'next', $3, $4)
returning id, region, pbf_md5, version, geojson, polygon`;

export interface RegionInsertArgs {
    region: string;
    pbfMd5: string;
    geojson: any;
    polygon: string;
}

export interface RegionInsertRow {
    id: string;
    region: string;
    pbfMd5: string;
    version: "previous" | "current" | "next" | "discarded";
    geojson: any;
    polygon: string;
}

export async function regionInsert(sql: Sql, args: RegionInsertArgs): Promise<RegionInsertRow | null> {
    const rows = await sql.unsafe(regionInsertQuery, [args.region, args.pbfMd5, args.geojson, args.polygon]).values();
    if (rows.length !== 1) {
        return null;
    }
    const row = rows[0];
    if (!row) {
        return null;
    }
    return {
        id: row[0],
        region: row[1],
        pbfMd5: row[2],
        version: row[3],
        geojson: row[4],
        polygon: row[5]
    };
}

export const regionSetDiscardedQuery = `-- name: RegionSetDiscarded :one
update regions
set version = 'discarded'
where region = $1 and pbf_md5 = $2
returning id, region, pbf_md5, version, geojson, polygon`;

export interface RegionSetDiscardedArgs {
    region: string;
    pbfMd5: string;
}

export interface RegionSetDiscardedRow {
    id: string;
    region: string;
    pbfMd5: string;
    version: "previous" | "current" | "next" | "discarded";
    geojson: any;
    polygon: string;
}

export async function regionSetDiscarded(sql: Sql, args: RegionSetDiscardedArgs): Promise<RegionSetDiscardedRow | null> {
    const rows = await sql.unsafe(regionSetDiscardedQuery, [args.region, args.pbfMd5]).values();
    if (rows.length !== 1) {
        return null;
    }
    const row = rows[0];
    if (!row) {
        return null;
    }
    return {
        id: row[0],
        region: row[1],
        pbfMd5: row[2],
        version: row[3],
        geojson: row[4],
        polygon: row[5]
    };
}

export const regionDeleteDiscardedAndPreviousQuery = `-- name: RegionDeleteDiscardedAndPrevious :exec
delete from regions
where region = $1 
	and pbf_md5 = $2 
	and (version = 'discarded' 
		or version = 'previous')`;

export interface RegionDeleteDiscardedAndPreviousArgs {
    region: string;
    pbfMd5: string;
}

export async function regionDeleteDiscardedAndPrevious(sql: Sql, args: RegionDeleteDiscardedAndPreviousArgs): Promise<void> {
    await sql.unsafe(regionDeleteDiscardedAndPreviousQuery, [args.region, args.pbfMd5]);
}

